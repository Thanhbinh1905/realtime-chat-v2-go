// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const acceptFriendRequest = `-- name: AcceptFriendRequest :exec
UPDATE friendships
SET status = 'accepted'
WHERE requester_id = $1 AND addressee_id = $2
`

type AcceptFriendRequestParams struct {
	RequesterID uuid.UUID `json:"requester_id"`
	AddresseeID uuid.UUID `json:"addressee_id"`
}

func (q *Queries) AcceptFriendRequest(ctx context.Context, arg AcceptFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, acceptFriendRequest, arg.RequesterID, arg.AddresseeID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, username, avatar)
VALUES ($1, $2, $3, $4)
RETURNING id, email, username, avatar, created_at
`

type CreateUserParams struct {
	ID       uuid.UUID      `json:"id"`
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}

const getFriends = `-- name: GetFriends :many
SELECT u.id, u.email, u.username, u.avatar, u.created_at
FROM users u
JOIN friendships f ON (f.addressee_id = u.id OR f.requester_id = u.id)
WHERE (f.requester_id = $1 OR f.addressee_id = $1)
  AND f.status = 'accepted'
  AND u.id != $1
`

func (q *Queries) GetFriends(ctx context.Context, requesterID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getFriends, requesterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Avatar,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, avatar, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, avatar, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, username, avatar, created_at FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Avatar,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectFriendRequest = `-- name: RejectFriendRequest :exec
UPDATE friendships
SET status = 'rejected'
WHERE requester_id = $1 AND addressee_id = $2
`

type RejectFriendRequestParams struct {
	RequesterID uuid.UUID `json:"requester_id"`
	AddresseeID uuid.UUID `json:"addressee_id"`
}

func (q *Queries) RejectFriendRequest(ctx context.Context, arg RejectFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, rejectFriendRequest, arg.RequesterID, arg.AddresseeID)
	return err
}

const sendFriendRequest = `-- name: SendFriendRequest :one
INSERT INTO friendships (id, requester_id, addressee_id, status)
VALUES ($1, $2, $3, 'pending')
RETURNING id, requester_id, addressee_id, status, created_at
`

type SendFriendRequestParams struct {
	ID          uuid.UUID `json:"id"`
	RequesterID uuid.UUID `json:"requester_id"`
	AddresseeID uuid.UUID `json:"addressee_id"`
}

func (q *Queries) SendFriendRequest(ctx context.Context, arg SendFriendRequestParams) (Friendship, error) {
	row := q.db.QueryRowContext(ctx, sendFriendRequest, arg.ID, arg.RequesterID, arg.AddresseeID)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.AddresseeID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
